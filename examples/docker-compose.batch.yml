# Docker Compose configuration for batch processing multiple files
#
# Usage examples:
#   docker-compose -f examples/docker-compose.batch.yml run --rm batch-compress-all
#   docker-compose -f examples/docker-compose.batch.yml run --rm batch-resize-videos
#   docker-compose -f examples/docker-compose.batch.yml run --rm batch-extract-audio
#
# Place your input files in ./media/input/
# Processed files will be saved to ./media/output/

services:
  # Base service configuration for batch operations
  ffmpeg-batch-base:
    image: ragedunicorn/ffmpeg:${FFMPEG_VERSION:-latest}
    volumes:
      - ../media:/tmp/workdir
    working_dir: /tmp/workdir
    stdin_open: true
    tty: true
    # Use shell as entrypoint for batch operations
    entrypoint: /bin/sh

  # Compress all videos in input directory
  batch-compress-all:
    extends:
      service: ffmpeg-batch-base
    environment:
      - CRF=${CRF:-23}
      - PRESET=${PRESET:-medium}
    command: >
      -c "echo 'Starting batch compression...';
      for file in input/*.mp4 input/*.avi input/*.mov input/*.mkv; do
        if [ -f \"$$file\" ]; then
          filename=$$(basename \"$$file\");
          name=\"$${filename%.*}\";
          ext=\"$${filename##*.}\";
          echo \"Processing: $$filename\";
          ffmpeg -i \"$$file\" -c:v libx264 -crf ${CRF} -preset ${PRESET} -c:a aac -b:a 128k \"output/$${name}_compressed.mp4\";
        fi
      done;
      echo 'Batch compression completed!'"

  # Resize all videos to 720p
  batch-resize-videos:
    extends:
      service: ffmpeg-batch-base
    environment:
      - WIDTH=${WIDTH:-1280}
      - HEIGHT=${HEIGHT:-720}
    command: >
      -c "for file in input/*.mp4 input/*.avi input/*.mov; do
        if [ -f \"$$file\" ]; then
          filename=$$(basename \"$$file\");
          name=\"$${filename%.*}\";
          ffmpeg -i \"$$file\" -vf \"scale=${WIDTH}:${HEIGHT}:force_original_aspect_ratio=decrease,pad=${WIDTH}:${HEIGHT}:(ow-iw)/2:(oh-ih)/2\" -c:a copy \"output/$${name}_${HEIGHT}p.mp4\";
        fi
      done"

  # Extract audio from all video files
  batch-extract-audio:
    extends:
      service: ffmpeg-batch-base
    environment:
      - AUDIO_FORMAT=${AUDIO_FORMAT:-mp3}
      - AUDIO_BITRATE=${AUDIO_BITRATE:-192k}
    command: >
      -c "for file in input/*.mp4 input/*.avi input/*.mov input/*.mkv; do
        if [ -f \"$$file\" ]; then
          filename=$$(basename \"$$file\");
          name=\"$${filename%.*}\";
          ffmpeg -i \"$$file\" -vn -acodec lib${AUDIO_FORMAT}lame -ab ${AUDIO_BITRATE} \"output/$${name}.${AUDIO_FORMAT}\";
        fi
      done"

  # Generate thumbnails for all videos
  batch-generate-thumbnails:
    extends:
      service: ffmpeg-batch-base
    environment:
      - THUMBNAIL_TIME=${THUMBNAIL_TIME:-00:00:05}
    command: >
      -c "mkdir -p output/thumbnails;
      for file in input/*.mp4 input/*.avi input/*.mov; do
        if [ -f \"$$file\" ]; then
          filename=$$(basename \"$$file\");
          name=\"$${filename%.*}\";
          ffmpeg -i \"$$file\" -ss ${THUMBNAIL_TIME} -vframes 1 -q:v 2 \"output/thumbnails/$${name}_thumb.jpg\";
        fi
      done"

  # Convert all images to specific format
  batch-convert-images:
    extends:
      service: ffmpeg-batch-base
    environment:
      - OUTPUT_FORMAT=${OUTPUT_FORMAT:-webp}
      - QUALITY=${QUALITY:-80}
    command: >
      -c "for file in input/*.jpg input/*.png input/*.bmp; do
        if [ -f \"$$file\" ]; then
          filename=$$(basename \"$$file\");
          name=\"$${filename%.*}\";
          ffmpeg -i \"$$file\" -quality ${QUALITY} \"output/$${name}.${OUTPUT_FORMAT}\";
        fi
      done"

  # Add watermark to all videos
  batch-add-watermark:
    extends:
      service: ffmpeg-batch-base
    environment:
      - WATERMARK=${WATERMARK:-input/watermark.png}
      - POSITION=${POSITION:-10:10}
    command: >
      -c "if [ ! -f \"${WATERMARK}\" ]; then
        echo 'Error: Watermark file not found!';
        exit 1;
      fi;
      for file in input/*.mp4; do
        if [ -f \"$$file\" ]; then
          filename=$$(basename \"$$file\");
          name=\"$${filename%.*}\";
          ffmpeg -i \"$$file\" -i \"${WATERMARK}\" -filter_complex \"overlay=${POSITION}\" -c:a copy \"output/$${name}_watermarked.mp4\";
        fi
      done"

  # Create video previews (shorter versions)
  batch-create-previews:
    extends:
      service: ffmpeg-batch-base
    environment:
      - PREVIEW_DURATION=${PREVIEW_DURATION:-30}
      - START_TIME=${START_TIME:-10}
    command: >
      -c "for file in input/*.mp4 input/*.avi input/*.mov; do
        if [ -f \"$$file\" ]; then
          filename=$$(basename \"$$file\");
          name=\"$${filename%.*}\";
          ffmpeg -i \"$$file\" -ss ${START_TIME} -t ${PREVIEW_DURATION} -c copy \"output/$${name}_preview.mp4\";
        fi
      done"

  # Normalize audio levels across multiple files
  batch-normalize-audio:
    extends:
      service: ffmpeg-batch-base
    command: >
      -c "for file in input/*.mp4 input/*.mp3 input/*.wav; do
        if [ -f \"$$file\" ]; then
          filename=$$(basename \"$$file\");
          name=\"$${filename%.*}\";
          ext=\"$${filename##*.}\";
          ffmpeg -i \"$$file\" -af 'loudnorm=I=-16:TP=-1.5:LRA=11' -c:v copy \"output/$${name}_normalized.$${ext}\";
        fi
      done"

  # Process videos with custom FFmpeg command
  batch-custom:
    extends:
      service: ffmpeg-batch-base
    environment:
      - FFMPEG_ARGS=${FFMPEG_ARGS:--c:v libx264 -crf 23 -c:a copy}
      - INPUT_PATTERN=${INPUT_PATTERN:-*.mp4}
      - OUTPUT_SUFFIX=${OUTPUT_SUFFIX:-_processed}
    command: >
      -c "for file in input/${INPUT_PATTERN}; do
        if [ -f \"$$file\" ]; then
          filename=$$(basename \"$$file\");
          name=\"$${filename%.*}\";
          ext=\"$${filename##*.}\";
          echo \"Processing: $$filename with args: ${FFMPEG_ARGS}\";
          ffmpeg -i \"$$file\" ${FFMPEG_ARGS} \"output/$${name}${OUTPUT_SUFFIX}.$${ext}\";
        fi
      done"

  # Generate report of all media files
  batch-media-info:
    extends:
      service: ffmpeg-batch-base
    entrypoint: /bin/sh
    command: >
      -c "echo 'Media Information Report' > output/media_report.txt;
      echo '======================' >> output/media_report.txt;
      echo '' >> output/media_report.txt;
      for file in input/*; do
        if [ -f \"$$file\" ]; then
          filename=$$(basename \"$$file\");
          echo \"File: $$filename\" >> output/media_report.txt;
          echo '-------------------' >> output/media_report.txt;
          ffprobe -v quiet -print_format json -show_format -show_streams \"$$file\" |
            grep -E '(codec_name|width|height|duration|bit_rate)' >> output/media_report.txt;
          echo '' >> output/media_report.txt;
        fi
      done;
      echo 'Report generated: output/media_report.txt'"
